[{"C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\index.js":"1","C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\App.js":"2","C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\Game.js":"3","C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\Board.js":"4","C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\Tile.js":"5"},{"size":219,"mtime":1607936542493,"results":"6","hashOfConfig":"7"},{"size":246,"mtime":1607945745289,"results":"8","hashOfConfig":"7"},{"size":371,"mtime":1607945791766,"results":"9","hashOfConfig":"7"},{"size":5475,"mtime":1607948182064,"results":"10","hashOfConfig":"7"},{"size":495,"mtime":1607944256255,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fdqfnx",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\index.js",[],"C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\App.js",[],"C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\Game.js",[],"C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\Board.js",["23","24","25","26","27"],"import React,{useState,useEffect} from 'react'\r\nimport Tile from './Tile'\r\n\r\nconst Board = () => {\r\n    const [tiles, setTiles] = useState([])\r\n    const [renderedTiles, setRenderedTiles] = useState()\r\n    const [turn, setTurn] = useState(1);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [winner, setWinner] = useState(null); \r\n    const [p1Score, setP1Score] = useState(0);\r\n    const [p2Score, setP2Score] = useState(0);\r\n    \r\n    const newGame = () => {\r\n        createTiles();\r\n        setGameOver(false)\r\n        setWinner(null)\r\n    }\r\n\r\n    const createTiles = () => {\r\n        const x = []; \r\n        for(let i = 0; i < 9; i++){\r\n            x.push({\r\n                id: i,\r\n                value: null\r\n            })\r\n        }\r\n        setTiles(x,renderTiles(tiles));\r\n    }\r\n\r\n    const renderTiles = (tilesToRender) => {\r\n        const x = tilesToRender.map(tile => {\r\n           return <Tile key={tile.id} id={tile.id} value={tile.value} toggleTile={onTileClicked} />\r\n        })\r\n        setRenderedTiles(x);\r\n    }\r\n    const onTileClicked = (tileId) => {\r\n        console.log('Click')\r\n        if(tiles[tileId].value == null && !gameOver){\r\n            const updatedArray = [...tiles]\r\n            if(turn === 1){\r\n                updatedArray[tileId].value = 1;\r\n                setTurn(2)\r\n            } else if( turn === 2){\r\n                updatedArray[tileId].value = 2;\r\n                setTurn(1)\r\n            }\r\n            setTiles(updatedArray, checkTiles())\r\n        }\r\n        \r\n    }\r\n    const checkTiles = () => {\r\n        \r\n        if(tiles[0].value === tiles[1].value && tiles[1].value === tiles[2].value && tiles[2].value !== null){\r\n            setWinner(tiles[0].value, setGameOver(true))\r\n        } else if(tiles[3].value === tiles[4].value && tiles[4].value === tiles[5].value && tiles[5].value !== null){\r\n            setWinner(tiles[3].value, setGameOver(true))\r\n        } else if(tiles[6].value === tiles[7].value && tiles[7].value === tiles[8].value && tiles[8].value !== null){\r\n            setWinner(tiles[6].value, setGameOver(true))\r\n        } else if(tiles[0].value === tiles[3].value && tiles[3].value === tiles[6].value && tiles[6].value !== null){\r\n            setWinner(tiles[0].value, setGameOver(true))\r\n        } else if(tiles[1].value === tiles[4].value && tiles[4].value === tiles[7].value && tiles[7].value !== null){\r\n            setWinner(tiles[1].value, setGameOver(true))\r\n        } else if(tiles[2].value === tiles[5].value && tiles[5].value === tiles[8].value && tiles[8].value !== null){\r\n            setWinner(tiles[2].value, setGameOver(true))\r\n        } else if(tiles[0].value === tiles[4].value && tiles[4].value === tiles[8].value && tiles[8].value !== null){\r\n            setWinner(tiles[0].value, setGameOver(true))\r\n        } else if(tiles[2].value === tiles[4].value && tiles[4].value === tiles[6].value && tiles[6].value !== null){\r\n            setWinner(tiles[2].value, setGameOver(true))\r\n        } else if(tiles[0].value !== null) {\r\n            let count = 0;\r\n\r\n            tiles.map(x => {\r\n                if(x.value === null){\r\n                    count++\r\n                }\r\n            });\r\n    \r\n            if(count === 0){\r\n                setWinner('draw', setGameOver(true))\r\n            }\r\n            console.log(`count: ${count}`)\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        createTiles();\r\n\r\n    }, []);\r\n    useEffect(() => {\r\n        const newWinner = winner;\r\n        if(winner === 1){\r\n            setP1Score(p1Score + 1)\r\n        } else if (winner === 2){\r\n            setP2Score(p2Score + 1)\r\n        }\r\n\r\n    }, [winner]);\r\n    useEffect(() => {\r\n        renderTiles(tiles);\r\n\r\n    }, [tiles]);\r\n\r\n    return (\r\n        <div className=\"board my-7\">\r\n            <div className=\"stats text-center font-bold text-center text-gray-700 text-2xl flex flex-col justify-around items-center\">\r\n                {/* <h2>Current Turn: Player {turn}</h2> */}\r\n                <div className=\"scores flex justify-center\" style={{width: '450px'}}>\r\n                    <div style={{width: '225px'}} className={`player1Score text-white text-center py-2 rounded-tl-3xl\r\n                    ${turn === 1? 'bg-red-500' : 'bg-red-300'}\r\n                    `}>\r\n                        X Score: {p1Score}\r\n                    </div>\r\n                    <div style={{width: '225px'}} className={`player2Score text-white text-center py-2 rounded-tr-3xl\r\n                    ${turn === 2? 'bg-blue-500' : 'bg-blue-300'}\r\n                    `}>\r\n                        O Score: {p2Score}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"grid\">\r\n                {renderedTiles}\r\n            </div>\r\n            {gameOver? \r\n                <div className=\" flex justify-center flex-col gameOver bg-green-600 text-white rounded-md p-4 shadow-md opacity-90\">\r\n                    <h1 className=\"font-bold text-center text-white text-6xl\">Game Over</h1>\r\n                    <h3 className=\"text-base text-center text-2xl\">{winner === 1 || winner === 2? `Winner is Player ${winner}`: \"Draw\"}</h3>\r\n                    <p className=\"newGame flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-bold text-white hover:text-green-200 text-lg\" onClick={newGame}>New Game?</p>\r\n                </div>  : ''} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","C:\\Users\\mitch\\Desktop\\Web-Dev-Projects\\tic-tac-toe\\src\\Tile.js",["28","29"],{"ruleId":"30","severity":1,"message":"31","line":72,"column":25,"nodeType":"32","messageId":"33","endLine":72,"endColumn":27},{"ruleId":"34","severity":1,"message":"35","line":90,"column":8,"nodeType":"36","endLine":90,"endColumn":10,"suggestions":"37"},{"ruleId":"38","severity":1,"message":"39","line":92,"column":15,"nodeType":"40","messageId":"41","endLine":92,"endColumn":24},{"ruleId":"34","severity":1,"message":"42","line":99,"column":8,"nodeType":"36","endLine":99,"endColumn":16,"suggestions":"43"},{"ruleId":"34","severity":1,"message":"44","line":103,"column":8,"nodeType":"36","endLine":103,"endColumn":15,"suggestions":"45"},{"ruleId":"38","severity":1,"message":"46","line":1,"column":16,"nodeType":"40","messageId":"41","endLine":1,"endColumn":24},{"ruleId":"38","severity":1,"message":"47","line":1,"column":26,"nodeType":"40","messageId":"41","endLine":1,"endColumn":35},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createTiles'. Either include it or remove the dependency array.","ArrayExpression",["48"],"no-unused-vars","'newWinner' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'p1Score' and 'p2Score'. Either include them or remove the dependency array. You can also do a functional update 'setP1Score(p => ...)' if you only need 'p1Score' in the 'setP1Score' call.",["49"],"React Hook useEffect has a missing dependency: 'renderTiles'. Either include it or remove the dependency array.",["50"],"'useState' is defined but never used.","'useEffect' is defined but never used.",{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},"Update the dependencies array to be: [createTiles]",{"range":"57","text":"58"},"Update the dependencies array to be: [p1Score, p2Score, winner]",{"range":"59","text":"60"},"Update the dependencies array to be: [renderTiles, tiles]",{"range":"61","text":"62"},[3436,3438],"[createTiles]",[3656,3664],"[p1Score, p2Score, winner]",[3729,3736],"[renderTiles, tiles]"]